#ifndef CHEATS_H
#define CHEATS_H

#include <CTRPluginFramework.hpp>
#include "Helpers.hpp"
#include "Unicode.h"

namespace CTRPluginFramework
{
   void ATKChan(MenuEntry *entry);
   void DFCChan(MenuEntry *entry);
   void TASChan(MenuEntry *entry);
   void Bommer(MenuEntry *entry);
   void BomberV2(MenuEntry *entry);
   void PlayerMoveTypeCoordinateMovement(MenuEntry *entry);
   void BeeHop(MenuEntry *entry);
   void NeonAura(MenuEntry *entry);
   void NeonAuraVersion2(MenuEntry *entry);
   void DoesntBlowOffWithABasicAttack(MenuEntry *entry);
   void CountermeasuresAgainstPlayerFreezesInTheAir(MenuEntry *entry);
   void StealingSuppliesBoxItems(MenuEntry *entry);
   void StealingSuppliesBoxIteems(MenuEntry *entry);
   void Bommeru(MenuEntry *entry);
   void BeeHoop(MenuEntry *entry)
   void TachiFireV2(MenuEntry *entry);
   void BomberVv2(MenuEntry *entry);
   void SlowHackX2(MenuEntry *entry);
   void SlowHacksss(MenuEntry *entry);
   void SpeedHackX2(MenuEntry *entry);
   void SpeedHacksss(MenuEntry *entry);
   void Zoom(MenuEntry *entry);
   void MonsterHPDoesNotDecrease(MenuEntry *entry);
   void TachiFireVer2(MenuEntry *entry);
   void AllAttributes(MenuEntry *entry);
   void FastEat(MenuEntry *entry);
   void WallThroughForErial(MenuEntry *entry);
   void WallThrough(MenuEntry *entry);
   void HyperDash(MenuEntry *entry);
   void ThePlayersNameTurnsRainbowInChat(MenuEntry *entry);
   void TheStrongestAttributeValue(MenuEntry *entry);
   void FireAttribute(MenuEntry *entry);
   void WaterAttribute(MenuEntry *entry);
   void LightningAttribute(MenuEntry *entry);
   void DragonAttribute(MenuEntry *entry);
   void IceAttribute(MenuEntry *entry);
   void PoisonAttribute(MenuEntry *entry);
   void ParalysisAttribute(MenuEntry *entry);
   void SleepAttribute(MenuEntry *entry);
   void BombingAttribute(MenuEntry *entry);
   void BugAttribute(MenuEntry *entry);
   void BugAttribute2(MenuEntry *entry);
   void MessageContinuousThrow(MenuEntry *entry);
   void CrashTheGame(MenuEntry *entry);
   void TachiFiring(MenuEntry *entry);
   void SetBug(MenuEntry *entry);
   void CurePlayerFreeze(MenuEntry *entry);
   void XCommand(MenuEntry *entry);
   void SwitchBetweenHunterAndNyanta(MenuEntry *entry);
   void ChatHijacking(MenuEntry *entry);
   void SpeedHackOff(MenuEntry *entry);
   void SpeedHackTest(MenuEntry *entry);
   void SpeedHack(MenuEntry *entry);
   void SpeedHack2(MenuEntry *entry);
   void SlowHack(MenuEntry *entry);
   void SlowHack2(MenuEntry *entry);
   void HR721(MenuEntry *entry);
   void HR810(MenuEntry *entry);
   void HR8585(MenuEntry *entry);
   void HR4545(MenuEntry *entry);
   void HR1919(MenuEntry *entry);
   void HR999(MenuEntry *entry);
   void HR721(MenuEntry *entry);
   void HR999(MenuEntry *entry);
   void HR4(MenuEntry *entry);
   void HR65535(MenuEntry *entry);
   void HR1(MenuEntry *entry);
   void HR0(MenuEntry *entry);
   void BossHP1OfflineOnly(MenuEntry *entry);
   void YouCanGoWithoutPostingTheQuestOff(MenuEntry *entry);
   void YouCanGoWithoutPostingTheQuest(MenuEntry *entry);
   void QuestContinuousRequest(MenuEntry *entry);
   void QuestRetirement(MenuEntry *entry);
   void HellJail(MenuEntry *entry);
   void HellJail(MenuEntry *entry);
   void Timer0(MenuEntry *entry);
   void TimerIncreases(MenuEntry *entry);
   void TimerControllerFast(MenuEntry *entry);
   void TimerControllerNormal(MenuEntry *entry);
   void TimerWillDecreaseSoon(MenuEntry *entry);
   void FillSkillSlots(MenuEntry *entry);
   void Transparent(MenuEntry *entry);
   void AttackPower1(MenuEntry *entry);
   void Defense1(MenuEntry *entry);
   void HighestDefense(MenuEntry *entry);
   void AttackPower999(MenuEntry *entry);
   void CrossbowFiring(MenuEntry *entry);
   void StaminaSuperFastRecovery(MenuEntry *entry);
   void HPSuperFastRecovery(MenuEntry *entry);
   void HPFastRecovery(MenuEntry *entry);
   void StaminaFastRecovery(MenuEntry *entry);
   void SharpnessMAX(MenuEntry *entry);
   void RidingGaugeAlwaysMAX(MenuEntry *entry);
   void HP0(MenuEntry *entry);
   void CameraFieldOfViewEnhancement(MenuEntry *entry);
   void CameraFieldOfViewSlightlyEnhanced(MenuEntry *entry);
   void CameraHack1(MenuEntry *entry);
   void CameraHack(MenuEntry *entry);
   void EverythingViewer(MenuEntry *entry);
   void SuperEye(MenuEntry *entry);
   void FPSViewpointV3(MenuEntry *entry);
   void FPSViewpointV2(MenuEntry *entry);
   void FPSViewpointV1(MenuEntry *entry);
   void RyujiinPointInfinite(MenuEntry *entry);
   void MoneyInfinity(MenuEntry *entry);
   void EmptyPouch(MenuEntry *entry);
   void BugItemSet(MenuEntry *entry);
   void InfiniteItemsOnThePouch(MenuEntry *entry);
   void DeveloperFavoriteItemSet(MenuEntry *entry);
   void MapAlwaysDisplayed(MenuEntry *entry);
   void PinDeveloperFavoriteSet(MenuEntry *entry);
   void CrazyWalkNoButtonAssignment(MenuEntry *entry);
   void CrazyJump(MenuEntry *entry);
   void CrazyWalkWithButton(MenuEntry *entry);
   void BalslideBalfalk(MenuEntry *entry);
   void BalflyBalfalkTestStage(MenuEntry *entry);
   void BalflyV2Balfalk(MenuEntry *entry);
   void AutomaticDriving(MenuEntry *entry);
   void BaseCampTeleport(MenuEntry *entry);
   void Jump(MenuEntry *entry);
   void MoonJump(MenuEntry *entry);
   void CameraDoesNotZoomDuringNPCConversation(MenuEntry *entry);
   void CoordinateMovementSlow(MenuEntry *entry);
   void CoordinateMovementEarly(MenuEntry *entry);
   void SpeedHackV2(MenuEntry *entry);
   void SpeedHackV2Slow(MenuEntry *entry);
}
#endif
